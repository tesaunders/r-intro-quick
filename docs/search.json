[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "On personal or unrestricted machines, install R and then RStudio directly.\nOn restricted/organisational machines (e.g. your University or workplace), install both R and RStudio (in that order) from your institutional software repository.\nOpen RStudio, navigate to the top Tools menu &gt; Install Packages, then enter tidyverse,ratdat,glue and click install. It may take a minute or two to install, and you’ll see lots of text printed in the console. Once finished, you will see a blue ‘&gt;’ symbol in the bottom left console pane.\n\n\n\n\nDownload and save this lesson repository from GitHub https://github.com/tesaunders/r-intro-quick/archive/refs/heads/main.zip to your Desktop.\nExtract the zip file and open the file r-intro-quick.Rproj"
  },
  {
    "objectID": "index.html#set-up",
    "href": "index.html#set-up",
    "title": "Introduction to R",
    "section": "",
    "text": "On personal or unrestricted machines, install R and then RStudio directly.\nOn restricted/organisational machines (e.g. your University or workplace), install both R and RStudio (in that order) from your institutional software repository.\nOpen RStudio, navigate to the top Tools menu &gt; Install Packages, then enter tidyverse,ratdat,glue and click install. It may take a minute or two to install, and you’ll see lots of text printed in the console. Once finished, you will see a blue ‘&gt;’ symbol in the bottom left console pane.\n\n\n\n\nDownload and save this lesson repository from GitHub https://github.com/tesaunders/r-intro-quick/archive/refs/heads/main.zip to your Desktop.\nExtract the zip file and open the file r-intro-quick.Rproj"
  },
  {
    "objectID": "index.html#r-rstudio",
    "href": "index.html#r-rstudio",
    "title": "Introduction to R",
    "section": "1. R & RStudio",
    "text": "1. R & RStudio\n\nProgramming vs point-and-click\nR is a programming language as well as software that runs R code.\nRStudio is a popular software interface that can make it easier to write R scripts and interact with R.\nProgramming languages have many benefits over point and click software:\n\nAnalysing your data with a series of written commands provides a record of exactly what you’ve done, aiding transparency and research integrity.\nWhen these commands are saved into a script file, they can easily be rerun on similar data, saving you valuable time and opening up new possibilities.\nR produces high-quality graphics, has a package for almost any type of analysis you’ll want to perform, and has a large and welcoming user community for help and guidance.\n\n\n\nNavigating RStudio\nRStudio has 4 panes, clockwise from top left:\n\nSource: Displays scripts, data, and other kinds of files.\nEnvironment: Displays the objects in your current R session.\nFiles/Plots/Help/Viewer: Displays files on your computer, plots, and help documentation.\nConsole: Where you interact directly with R.\n\n\n\nProjects\nIt’s best to keep related files and analyses together in project folders. You can then set up an RStudio project you’re working on, which provides some useful features when working with R.\nPortable project stuff\n\n\nConsole vs Script\nYou can run commands directly in the R console, or you can write them into an R script.\nConsole:\n\nWhere code is run/executed\nType commands at the prompt (&gt; symbol)\nPress Enter to execute the command and print the result\nCan’t access what you did after closing RStudio\n\nScript:\n\nA list of R commands in a plain text file with a .R extension\nFile → New File → R Script or + button in the top left corner of RStudio\nCmd+Enter (Mac) or Ctrl+Enter (Windows) will run the line of code that your cursor is on, or which is highlighted\nYou can leave comments with #\nCommands are saved and can be rerun later"
  },
  {
    "objectID": "index.html#plotting-with-ggplot2",
    "href": "index.html#plotting-with-ggplot2",
    "title": "Introduction to R",
    "section": "2. Plotting with ggplot2",
    "text": "2. Plotting with ggplot2\nLoad the packages we need with library(). We’ll talk more about functions later.\n\nlibrary(ggplot2)\nlibrary(ratdat)\n\nggplot is a popular plotting package. Plots made with this packages are built step by step by adding new layers.\nThe ratdat package contains data from the Portal Project, a long-term dataset from Portal, Arizona, in the Chihuahuan desert.\nWe will be using a dataset called complete_old.\n\n?complete_old\n\nTo build a plot we can start with a basic template:\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;()\nWe need to specify everything within &lt;&gt;.\n\nggplot(data = complete_old)\n\n\n\n\n\n\n\n\nThe plot is blank because we haven’t told ggplot() which variables in the data we want to plot.\n\nggplot(data = complete_old, mapping = aes(x = weight, y = hindfoot_length))\n\n\n\n\n\n\n\n\nWe haven’t specified how we want the data to be displayed. We do this using geom_ functions, which specify the type of geometry we want, such as points, lines, or bars. We can add a geom_point() layer to our plot by using the + sign.\n\nggplot(data = complete_old, mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWhen we have overlapping points we can adjust the transparency of the points using the alpha argument, which takes a value between 0 and 1:\n\nggplot(data = complete_old, mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point(alpha = 0.2)\n\n\n\n\n\n\n\n\nChange the color of points:\n\nggplot(data = complete_old, mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point(alpha = 0.2, color = \"blue\")\n\n\n\n\n\n\n\n\nChange the colour of points to take on the value of another variable:\n\nggplot(data = complete_old, mapping = aes(x = weight, y = hindfoot_length, color = plot_type)) +\n  geom_point(alpha = 0.2)\n\n\n\n\n\n\n\n\nMake a boxplot with plot_type on the x axis:\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nChange the color of plots using fill and remove legend:\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE)\n\n\n\n\n\n\n\n\nChange theme by specifying a built-in theme called theme_bw():\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_bw()\n\n\n\n\n\n\n\n\nChange the colour scheme to use specific colours. You need to specify as many colours as there are groups. There are a range of scale_ functions, and you need to match based on the aesthetic that has been mapped, eg scale_fill_ relates to the fill scales, whereas scale_color_ relates to the colour scales in aes().\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_bw() +\n  scale_fill_manual(values = c(\"darkgreen\", \"skyblue\", \"pink\", \"grey\", \"purple\"))\n\n\n\n\n\n\n\n\nGive the plot a title and change the x and y labels:\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_bw() +\n  labs(title = \"Rodent Size By Plot Type\",\n       x = \"Plot Type\",\n       y = \"Hindfoot Length (mm)\")\n\n\n\n\n\n\n\n\nCentre the plot title:\n\nggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(title = \"Rodent Size By Plot Type\",\n       x = \"Plot Type\",\n       y = \"Hindfoot Length (mm)\")\n\n\n\n\n\n\n\n\nSave the plot by assigning it to an object called final_plot and using ggsave():\n\nfinal_plot &lt;- ggplot(data = complete_old, mapping = aes(x = plot_type, y = hindfoot_length, fill = plot_type)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(title = \"Rodent Size By Plot Type\",\n       x = \"Plot Type\",\n       y = \"Hindfoot Length (mm)\")\n\nggsave(plot = final_plot, filename = \"plots/rodent-size-plot-type.png\",\n       width = 8, height = 6)\n\nBy default, ggplot dimensions are specified in inches, and images are 300 DPI. So this image will have a resolution of 2400 pixels wide by 1800 pixels high.\n\n\n\n\n\n\nExercise (5 min)\n\n\n\nCreate a box plot using complete_old of plot_type vs weight with the following features:\n\nColour inside the box based on plot_type\nBoxes are 50% transparent\nBox outlines and outlier points are grey75\nSet the theme to be black and white\nAngle the x-axis text 45 degrees and hjust so the end of the label is inline with the tick\nGive nice labels to the axes and a title\n\n\nggplot(data = FIXME, mapping = aes(x = FIXME, \n                                   y = FIXME, \n                                   fill = FIXME)) + \n  geom_boxplot(FIXME)+\n  theme_FIXME() +\n  theme(FIXME) +\n  labs(FIXME)\n\n\n\n\n\n\n\nExample solution\n\n\n\n\n\n\n# create a plot\nggplot(data = complete_old, mapping = aes(x = plot_type, \n                                          y = weight, \n                                          fill = plot_type)) + \n  geom_boxplot(alpha = 0.5, \n               colour = 'grey75')+\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, \n                                   hjust = 1)) +\n  labs(title = \"Rodent Weight by Plot Type\",\n       x = \"Plot Type\",\n       y = \"Weight (g)\")"
  },
  {
    "objectID": "index.html#programming-basics",
    "href": "index.html#programming-basics",
    "title": "Introduction to R",
    "section": "3. Programming basics",
    "text": "3. Programming basics\n\nVectors\nThere are 4 main types of vectors:\n\n\"character\" for text. Each entry is wrapped in quotes. In other programming languages, this type of data may be referred to as “strings”.\n\"integer\" for integers. All the numeric values in complete_old are integers. You may sometimes see integers represented like 2L or 20L. The L indicates to R that it is an integer, instead of the next data type, \"numeric\".\n\"numeric\", aka \"double\", vectors can contain numbers including decimals. Other languages may refer to these as “float” or “floating point” numbers.\n\"logical\" for TRUE and FALSE, which can also be represented as T and F. In other contexts, these may be referred to as “Boolean” data. Note they are not wrapped in quotes.\n\nVectors can only be of a single type.\nTo create a vector from scratch, we can use the c() function, putting values inside, separated by commas. Vectors are the basic building blocks of all data in R.\n\n\nData.frames\nData.frames are made up of vectors; each column in a data.frame is a vector.\nWe can see more information about complete_old by using the structure function:\n\nstr(complete_old)\n\ntibble [16,878 × 13] (S3: tbl_df/tbl/data.frame)\n $ record_id      : int [1:16878] 1 2 3 4 5 6 7 8 9 10 ...\n $ month          : int [1:16878] 7 7 7 7 7 7 7 7 7 7 ...\n $ day            : int [1:16878] 16 16 16 16 16 16 16 16 16 16 ...\n $ year           : int [1:16878] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 ...\n $ plot_id        : int [1:16878] 2 3 2 7 3 1 2 1 1 6 ...\n $ species_id     : chr [1:16878] \"NL\" \"NL\" \"DM\" \"DM\" ...\n $ sex            : chr [1:16878] \"M\" \"M\" \"F\" \"M\" ...\n $ hindfoot_length: int [1:16878] 32 33 37 36 35 14 NA 37 34 20 ...\n $ weight         : int [1:16878] NA NA NA NA NA NA NA NA NA NA ...\n $ genus          : chr [1:16878] \"Neotoma\" \"Neotoma\" \"Dipodomys\" \"Dipodomys\" ...\n $ species        : chr [1:16878] \"albigula\" \"albigula\" \"merriami\" \"merriami\" ...\n $ taxa           : chr [1:16878] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:16878] \"Control\" \"Long-term Krat Exclosure\" \"Control\" \"Rodent Exclosure\" ...\n\n\nThe $ in front of each variable is an operator that allows us to select individual columns from a data.frame.\n\ncomplete_old$year\n\n  [1] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [16] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [31] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [46] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [61] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [76] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [91] 1977 1977 1977 1977 1977 1977 1977 1977 1977 1977\n [ reached 'max' / getOption(\"max.print\") -- omitted 16778 entries ]\n\n\nWe get back all values in the year column.\n\n\nObjects and assignment\nWe can assign a value to an object by naming the object and using the assignment operator (&lt;-):\n\nx &lt;- 5\n\nWe can also assign objects to other objects:\n\ny &lt;- x\n\nIf we now overwrite the value of x, the value of y will not change:\n\nx &lt;- 10\ny\n\n[1] 5\n\n\n\n\nFunctions and arguments\nFunctions take arguments, and some arguments are required. Optional arguments are called options.\nThe round() function rounds a number. Lets take a look at how it works:\n\n?round()\n\nIt requires a number to round (x), and optionally the number of digits to round to (digits):\n\nround(x = 3.14159, digits = 1)\n\n[1] 3.1\n\n\nIf we don’t provide digits it will default to 0:\n\nround(x = 3.14159)\n\n[1] 3\n\n\nIf we provide arguments in the order expected we don’t have to name them (but it’s good to when starting out):\n\nround(3.14159, 1)\n\n[1] 3.1\n\n\n\n\nReading in data\nUp until now, we’ve been working with the complete_old dataframe contained in the ratdat package. However, you’ll typically want to access data stored somewhere on your computer as files. Our project contains a data file in the /data directory, and we’re going to read it in now.\nFirst, let’s load the Tidyverse package. This contains many other packages, including some we’ve used already like ggplot2, but it’s usually more convenient to load all of them at once.\n\nlibrary(tidyverse)\n\ntidyverse vs. base R\nIn R, there are often many ways to get a job done. The phrase base R is used to refer to approaches that utilize functions contained in R’s default packages. There are some key base R approaches we will not be teaching. These include square bracket subsetting and base plotting. You may come across code written by other people that looks like surveys[1:10, 2] or plot(surveys$weight, surveys$hindfoot_length), which are base R commands.\nThe tidyverse packages share a similar syntax and philosophy, making them consistent and producing highly readable code. They are also very flexible and powerful, and tend to have very clear documentation written with novice users in mind.\nBecause we’re using an RStudio project, we can specify the relative file path when reading in our data (relative to the project folder):\n\nsurveys &lt;- read_csv(\"data/surveys_complete_77_89.csv\")\n\n\n\nSubsetting\nTwo of the most commonly used functions for manipulating data are select(), which selects certain columns of a data.frame, and filter(), which filters out rows according to certain criteria.\nThe first argument for select() is the name of the data.frame, and the rest of the arguments are unquoted names of the columns you want:\n\nselect(surveys, plot_id, species_id, hindfoot_length)\n\n# A tibble: 16,878 × 3\n   plot_id species_id hindfoot_length\n     &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1       2 NL                      32\n 2       3 NL                      33\n 3       2 DM                      37\n 4       7 DM                      36\n 5       3 DM                      35\n 6       1 PF                      14\n 7       2 PE                      NA\n 8       1 DM                      37\n 9       1 DM                      34\n10       6 PF                      20\n# ℹ 16,868 more rows\n\n\nThe columns are arranged in the order we specified inside select().\nPut a - in front of the column you want to exclude:\n\nselect(surveys, -record_id, -year)\n\n# A tibble: 16,878 × 11\n   month   day plot_id species_id sex   hindfoot_length weight genus     species\n   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  \n 1     7    16       2 NL         M                  32     NA Neotoma   albigu…\n 2     7    16       3 NL         M                  33     NA Neotoma   albigu…\n 3     7    16       2 DM         F                  37     NA Dipodomys merria…\n 4     7    16       7 DM         M                  36     NA Dipodomys merria…\n 5     7    16       3 DM         M                  35     NA Dipodomys merria…\n 6     7    16       1 PF         M                  14     NA Perognat… flavus \n 7     7    16       2 PE         F                  NA     NA Peromysc… eremic…\n 8     7    16       1 DM         M                  37     NA Dipodomys merria…\n 9     7    16       1 DM         F                  34     NA Dipodomys merria…\n10     7    16       6 PF         F                  20     NA Perognat… flavus \n# ℹ 16,868 more rows\n# ℹ 2 more variables: taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nTo select the 3rd, 4th, 5th, and 10th columns, we could run the following code:\n\nselect(surveys, c(3:5, 10))\n\n# A tibble: 16,878 × 4\n     day  year plot_id genus      \n   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      \n 1    16  1977       2 Neotoma    \n 2    16  1977       3 Neotoma    \n 3    16  1977       2 Dipodomys  \n 4    16  1977       7 Dipodomys  \n 5    16  1977       3 Dipodomys  \n 6    16  1977       1 Perognathus\n 7    16  1977       2 Peromyscus \n 8    16  1977       1 Dipodomys  \n 9    16  1977       1 Dipodomys  \n10    16  1977       6 Perognathus\n# ℹ 16,868 more rows\n\n\nThe filter() function is used to select rows that meet certain criteria. To get all the rows where the value of year is equal to 1985:\n\nfilter(surveys, year == 1985)\n\n# A tibble: 1,438 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1      9790     1    19  1985      16 RM         F                  16      4\n 2      9791     1    19  1985      17 OT         F                  20     16\n 3      9792     1    19  1985       6 DO         M                  35     48\n 4      9793     1    19  1985      12 DO         F                  35     40\n 5      9794     1    19  1985      24 RM         M                  16      4\n 6      9795     1    19  1985      12 DO         M                  34     48\n 7      9796     1    19  1985       6 DM         F                  37     35\n 8      9797     1    19  1985      14 DM         M                  36     45\n 9      9798     1    19  1985       6 DM         F                  36     38\n10      9799     1    19  1985      19 RM         M                  16      4\n# ℹ 1,428 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nThe == sign means “is equal to”. There are several other operators we can use: &gt;, &gt;=, &lt;, &lt;=, and != (not equal to). Another useful operator is %in%, which asks if the value on the lefthand side is found anywhere in the vector on the righthand side. For example, to get rows with specific species_id values, we could run:\n\nfilter(surveys, species_id %in% c(\"RM\", \"DO\"))\n\n# A tibble: 2,835 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1        68     8    19  1977       8 DO         F                  32     52\n 2       292    10    17  1977       3 DO         F                  36     33\n 3       294    10    17  1977       3 DO         F                  37     50\n 4       311    10    17  1977      19 RM         M                  18     13\n 5       317    10    17  1977      17 DO         F                  32     48\n 6       323    10    17  1977      17 DO         F                  33     31\n 7       337    10    18  1977       8 DO         F                  35     41\n 8       356    11    12  1977       1 DO         F                  32     44\n 9       378    11    12  1977       1 DO         M                  33     48\n10       397    11    13  1977      17 RM         F                  16      7\n# ℹ 2,825 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nWe can also use multiple conditions:\n\nfilter(surveys, year &lt;= 1988 & !is.na(hindfoot_length))\n\n# A tibble: 12,779 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         8     7    16  1977       1 DM         M                  37     NA\n 8         9     7    16  1977       1 DM         F                  34     NA\n 9        10     7    16  1977       6 PF         F                  20     NA\n10        11     7    16  1977       5 DS         F                  53     NA\n# ℹ 12,769 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nWe get rows with a year less than or equal to 1988 and whose hindfoot length values are not NA. The ! before the is.na() function means “not”.\n\n\nPiping\nWhat happens if we want to both select() and filter() our data?\nAn elegant solution to this problem is an operator called the pipe %&gt;%. You can insert it by using the keyboard shortcut Shift+Cmd+M (Mac) or Shift+Ctrl+M (Windows).\n\nsurveys %&gt;% \n  select(-day) %&gt;% \n  filter(month &gt;= 7)\n\n# A tibble: 8,244 × 12\n   record_id month  year plot_id species_id sex   hindfoot_length weight genus  \n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1         1     7  1977       2 NL         M                  32     NA Neotoma\n 2         2     7  1977       3 NL         M                  33     NA Neotoma\n 3         3     7  1977       2 DM         F                  37     NA Dipodo…\n 4         4     7  1977       7 DM         M                  36     NA Dipodo…\n 5         5     7  1977       3 DM         M                  35     NA Dipodo…\n 6         6     7  1977       1 PF         M                  14     NA Perogn…\n 7         7     7  1977       2 PE         F                  NA     NA Peromy…\n 8         8     7  1977       1 DM         M                  37     NA Dipodo…\n 9         9     7  1977       1 DM         F                  34     NA Dipodo…\n10        10     7  1977       6 PF         F                  20     NA Perogn…\n# ℹ 8,234 more rows\n# ℹ 3 more variables: species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nThe pipe takes the object on the lefthand side and inserts it as the first argument of the function on the righthand side. By putting each of our functions onto a new line, we can build a nice, readable pipeline.\nWe can assign this final product to an object:\n\nsurveys_sub &lt;- surveys %&gt;% \n  select(-day) %&gt;% \n  filter(month &gt;= 7)\n\nBuild a pipeline step by step prior to assignment. Add functions to the pipeline as you go, with the results printing in the console for you to view. Once you’re satisfied with your final result, go back and add the assignment arrow statement at the start. This approach is very interactive, allowing you to see the results of each step as you build the pipeline, and produces nicely readable code.\nAnother common task is creating a new column based on values in existing columns. For example, to add a new column that has the weight in kilograms instead of grams:\n\nsurveys %&gt;% \n  mutate(weight_kg = weight / 1000)\n\n# A tibble: 16,878 × 14\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 16,868 more rows\n# ℹ 5 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;,\n#   weight_kg &lt;dbl&gt;\n\n\nYou can create multiple columns in one mutate() call, and they will get created in the order you write them. This means you can even reference the first new column in the second new column:\n\nsurveys %&gt;% \n  mutate(weight_kg = weight / 1000,\n         weight_lbs = weight_kg * 2.2)\n\n# A tibble: 16,878 × 15\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2         2     7    16  1977       3 NL         M                  33     NA\n 3         3     7    16  1977       2 DM         F                  37     NA\n 4         4     7    16  1977       7 DM         M                  36     NA\n 5         5     7    16  1977       3 DM         M                  35     NA\n 6         6     7    16  1977       1 PF         M                  14     NA\n 7         7     7    16  1977       2 PE         F                  NA     NA\n 8         8     7    16  1977       1 DM         M                  37     NA\n 9         9     7    16  1977       1 DM         F                  34     NA\n10        10     7    16  1977       6 PF         F                  20     NA\n# ℹ 16,868 more rows\n# ℹ 6 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;,\n#   weight_kg &lt;dbl&gt;, weight_lbs &lt;dbl&gt;\n\n\n\n\nGrouping\nMany data analysis tasks can be achieved using the split-apply-combine approach: you split the data into groups, apply some analysis to each group, and combine the results in some way.\ngroup_by() takes a data.frame and the name of one or more columns with categorical values that define the groups. summarize() then collapses each group into a one-row summary of the group, giving you back a data.frame with one row per group. The syntax for summarize() is similar to mutate(), where you define new columns based on values of other columns.\nTo calculate the mean weight of all our animals by sex:\n\nsurveys %&gt;% \n  group_by(sex) %&gt;% \n  summarize(mean_weight = mean(weight, na.rm = T))\n\n# A tibble: 3 × 2\n  sex   mean_weight\n  &lt;chr&gt;       &lt;dbl&gt;\n1 F            53.1\n2 M            53.2\n3 &lt;NA&gt;         74.0\n\n\nWe can define multiple columns in one summarize() call. The function n() will count the number of rows in each group.\n\nsurveys %&gt;% \n  group_by(sex) %&gt;% \n  summarize(mean_weight = mean(weight, na.rm = T),\n            n = n())\n\n# A tibble: 3 × 3\n  sex   mean_weight     n\n  &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n1 F            53.1  7318\n2 M            53.2  8260\n3 &lt;NA&gt;         74.0  1300\n\n\nYou will often want to create groups based on multiple columns. For example, we might be interested in the mean weight of every species + sex combination.\n\nsurveys %&gt;% \n  group_by(species_id, sex) %&gt;% \n  summarize(mean_weight = mean(weight, na.rm = T),\n            n = n())\n\n# A tibble: 67 × 4\n# Groups:   species_id [36]\n   species_id sex   mean_weight     n\n   &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 AB         &lt;NA&gt;        NaN     223\n 2 AH         &lt;NA&gt;        NaN     136\n 3 BA         M             7       3\n 4 CB         &lt;NA&gt;        NaN      23\n 5 CM         &lt;NA&gt;        NaN      13\n 6 CQ         &lt;NA&gt;        NaN      16\n 7 CS         &lt;NA&gt;        NaN       1\n 8 CV         &lt;NA&gt;        NaN       1\n 9 DM         F            40.7  2522\n10 DM         M            44.0  3108\n# ℹ 57 more rows\n\n\nOur resulting data.frame is much larger, since we have a greater number of groups. We also see a strange value showing up in our mean_weight column: NaN. This stands for “Not a Number”, and it often results from trying to do an operation a vector with zero entries. If a particular group (like the AB species ID + NA sex group) has only NA values for weight, then the na.rm = T argument in mean() will remove all the values prior to calculating the mean. The result will be a value of NaN. Since we are not particularly interested in these values, let’s add a step to our pipeline to remove rows where weight is NA before doing any other steps. This means that any groups with only NA values will disappear from our data.frame before we formally create the groups with group_by().\n\nsurveys %&gt;% \n  filter(!is.na(weight)) %&gt;% \n  group_by(species_id, sex) %&gt;% \n  summarize(mean_weight = mean(weight),\n            n = n())\n\n# A tibble: 46 × 4\n# Groups:   species_id [18]\n   species_id sex   mean_weight     n\n   &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 BA         M             7       3\n 2 DM         F            40.7  2460\n 3 DM         M            44.0  3013\n 4 DM         &lt;NA&gt;         37       8\n 5 DO         F            48.4   679\n 6 DO         M            49.3   748\n 7 DO         &lt;NA&gt;         44       1\n 8 DS         F           118.   1055\n 9 DS         M           123.   1184\n10 DS         &lt;NA&gt;        121.     16\n# ℹ 36 more rows\n\n\nIt’s often useful to take a look at the results in some order, like the lowest mean weight to highest. We can use the arrange() function for that:\n\nsurveys %&gt;% \n  filter(!is.na(weight)) %&gt;% \n  group_by(species_id, sex) %&gt;% \n  summarize(mean_weight = mean(weight),\n            n = n()) %&gt;% \n  arrange(mean_weight)\n\n# A tibble: 46 × 4\n# Groups:   species_id [18]\n   species_id sex   mean_weight     n\n   &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 PF         &lt;NA&gt;         6        2\n 2 BA         M            7        3\n 3 PF         F            7.09   215\n 4 PF         M            7.10   296\n 5 RM         M            9.92   678\n 6 RM         &lt;NA&gt;        10.4      7\n 7 RM         F           10.7    629\n 8 RF         M           12.4     16\n 9 RF         F           13.7     46\n10 PP         &lt;NA&gt;        15        2\n# ℹ 36 more rows\n\n\nIf we want to reverse the order, we can wrap the column name in desc():\n\nsurveys %&gt;% \n  filter(!is.na(weight)) %&gt;% \n  group_by(species_id, sex) %&gt;% \n  summarize(mean_weight = mean(weight),\n            n = n()) %&gt;% \n  arrange(desc(mean_weight))\n\n# A tibble: 46 × 4\n# Groups:   species_id [18]\n   species_id sex   mean_weight     n\n   &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 NL         M           168.    355\n 2 NL         &lt;NA&gt;        164.      9\n 3 NL         F           151.    460\n 4 SS         M           130       1\n 5 DS         M           123.   1184\n 6 DS         &lt;NA&gt;        121.     16\n 7 DS         F           118.   1055\n 8 SH         F            79.2    61\n 9 SH         M            67.6    34\n10 SF         F            58.3     3\n# ℹ 36 more rows\n\n\n\n\n\n\n\n\nExercise (5 min)\n\n\n\nUsing the surveys dataset:\n\nremove NA’s from the hindfoot_length\nremove rows missing sex\nfind the minimum, mean, and maximum hindfoot_length, and number of observations for each species\norder the results by the longest hindfoot_length\n\n\nFIXME %&gt;% \n  filter(FIXME) %&gt;% \n  group_by(FIXME) %&gt;% \n  summarise(FIXME) %&gt;% \n  FIXME(desc(FIXME))\n\n\n\n\n\n\n\nExample solution\n\n\n\n\n\n\nsurveys %&gt;% \n  filter(!is.na(hindfoot_length), !is.na(sex)) %&gt;% \n  group_by(species) %&gt;% \n  summarise(\n    n = n(), \n    min_hindfoot_length = min(hindfoot_length),\n    mean_hindfoot_length = mean(hindfoot_length),\n    max_hindfoot_length = max(hindfoot_length)\n  ) %&gt;% \n  arrange(desc(max_hindfoot_length))\n\n# A tibble: 16 × 5\n   species        n min_hindfoot_length mean_hindfoot_length max_hindfoot_length\n   &lt;chr&gt;      &lt;int&gt;               &lt;dbl&gt;                &lt;dbl&gt;               &lt;dbl&gt;\n 1 spectabil…  2041                  39                 50.0                  58\n 2 ordii       1373                  28                 35.4                  53\n 3 merriami    5129                  24                 36.0                  50\n 4 hispidus      98                  21                 28.5                  39\n 5 leucogast…   707                  17                 20.6                  39\n 6 albigula     753                  25                 32.3                  38\n 7 fulvivent…     5                  26                 29                    38\n 8 torridus     760                  13                 20.2                  31\n 9 eremicus     783                  14                 20.2                  30\n10 maniculat…   373                  16                 20.4                  25\n11 penicilla…   348                  16                 21.7                  25\n12 flavus       454                   9                 15.5                  21\n13 megalotis   1223                   6                 16.4                  21\n14 sp.            8                  13                 19.1                  21\n15 fulvescens    60                  15                 17.4                  20\n16 taylori        3                  12                 13                    14"
  },
  {
    "objectID": "index.html#the-power-of-functions",
    "href": "index.html#the-power-of-functions",
    "title": "Introduction to R",
    "section": "4. The power of functions",
    "text": "4. The power of functions\n\nProblem: Creating multiple plots\nLet’s say you need to create separate boxplots showing the variation in hindfoot length based on plot type, but for each species. One way to approach this problem would be to filter to a single species, and pipe the filtered data into a ggplot call. For exmaple, to do this for the rodent species marked “NL”:\n\ncomplete_old %&gt;%\n  filter(species_id == \"NL\" & !is.na(hindfoot_length)) %&gt;%\n  ggplot(aes(x = plot_type, y = hindfoot_length)) +\n  geom_boxplot() +\n  theme_bw()\n\n\n\n\n\n\n\n\nBut repeating this chunk of code many times to produce plots for all species is inefficient, takes up a lot of room, and makes it hard to tweak aspects of the plots once you’ve written the code.\n\n\nWriting a function\nWhen working with programming languages, writing your own functions allows you automate sets of operations together in a much more efficient way.\nTo write a function you need to first analyse your code to figure out what parts are constant and what parts vary. Let’s look at the previous bit of code and replace the parts that could change with ___:\n\ncomplete_old %&gt;%\n  filter(species_id == \"___\" & !is.na(hindfoot_length)) %&gt;%\n  ggplot(aes(x = plot_type, y = hindfoot_length)) +\n  geom_boxplot() +\n  theme_bw()\n\nThis bit of code requires a species ID code to create a plot based on that species, but the other parts remain constant.\nWhen writing a function, start with this basic template:\n\nname &lt;- function(arguments) {\n  body\n}\n\nLet’s call our example function plot_species, let’s name our argument sp_id to refer to species_id, and let’s replace the body with the appropriate code from above:\n\nplot_species &lt;- function(sp_id) {\n  complete_old %&gt;%\n    filter(species_id == sp_id & !is.na(hindfoot_length)) %&gt;%\n    ggplot(aes(x = plot_type, y = hindfoot_length)) +\n    geom_boxplot() +\n    theme_bw()\n}\n\nLets try it out for a single species ID:\n\nplot_species(\"RM\")\n\n\n\n\n\n\n\n\nNow that we know it works, let’s use it to create plots for all 36 species. We’re going to use the map() function from the {purrr} package (included in {tidyverse} which we loaded earlier) to do this. This function takes a list or vector (in our case unique values from the species_id column), and a function to apply to all values (in our case, the plot function we just created):\n\nmap(unique(complete_old$species_id), plot_species)\n\nLet’s modify our function to give each plot a title to label which species_id is being plotted. To do this we’re going to use a package called glue, so we’ll need to load that too:\n\nlibrary(glue)\n\nplot_species &lt;- function(sp_id) {\n  complete_old %&gt;%\n    filter(species_id == sp_id & !is.na(hindfoot_length)) %&gt;%\n    ggplot(aes(x = plot_type, y = hindfoot_length)) +\n    geom_boxplot() +\n    theme_bw() +\n    labs(title = glue(\"Variation in hindfoot length based on plot type for {sp_id} species\"))\n}\n\nmap(unique(complete_old$species_id), plot_species)\n\nWe can stop R from creating plots for species which only contain NA values by filtering valid species_id codes. First filter all rows out if they contain an NA value for hindfoot_length, then use pull() to grab the remaining species_id codes, and use unique() to end up with a vector of the unique species_id codes that have hindfoot_length measurements:\n\nvalid_species &lt;- complete_old %&gt;%\n  filter(!is.na(hindfoot_length)) %&gt;%  \n  pull(species_id) %&gt;%  \n  unique()\n\nNow we can perform the map again on valid species_id codes:\n\nmap(valid_species, plot_species)\n\nLet’s modify our function one more time to save each plot as a separate file with a filename based on the species code within the plot:\n\nplot_species &lt;- function(sp_id, plot_path) {\n  complete_old %&gt;%\n    filter(species_id == sp_id & !is.na(hindfoot_length)) %&gt;%\n    ggplot(aes(x = plot_type, y = hindfoot_length)) +\n    geom_boxplot() +\n    theme_bw() +\n    labs(title = glue(\"Variation in hindfoot length based on plot type for {sp_id} species\"))\n  \n  ggsave(filename = glue(\"{plot_path}/hflength-box-{sp_id}.png\"), plot = last_plot())\n}\n\nmap(valid_species, plot_species, plot_path = \"plots/\")"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Introduction to R",
    "section": "Resources",
    "text": "Resources\nData Analysis and Visualization in R for Ecologists\nR for Data Science\nTidyverse documentation\nPosit Forums\nStack Exchange"
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Instructions As you complete the exercises keep your cursor in the exercise code chunk and ensure to run all chunks above the exercise chunk (PC: ctrl + alt + shift + P or Mac: cmd + alt + shift + P) followed by the current code chunk you are on (PC: ctrl + shift + enter, or Mac: cmd + shift + return), or render the whole document (PC: ctrl + shift + K, or Mac: cmd + shift + K)."
  },
  {
    "objectID": "exercises.html#exercise-1",
    "href": "exercises.html#exercise-1",
    "title": "Exercises",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a box plot using complete_old of plot_type vs weight with the following features:\n\nColour inside the box based on plot_type\nBoxes are 50% transparent\nBox outlines and outlier points are grey75\nSet the theme to be black and white\nAngle the x-axis text 45 degrees and hjust so the end of the label is inline with the tick\nGive nice labels to the axes and a title\n\nFix the FIXMEs and then switch the top line of the code block to #| eval: true. After which execute the code block (PC: ctrl + shift + enter, or Mac: cmd + shift + return)\n\nlibrary(ggplot2)\nlibrary(ratdat)\n\nggplot(data = FIXME, mapping = aes(x = FIXME, \n                                   y = FIXME, \n                                   fill = FIXME)) + \n  geom_boxplot(FIXME)+\n  theme_FIXME() +\n  theme(FIXME) +\n  labs(FIXME)"
  },
  {
    "objectID": "exercises.html#exercise-2",
    "href": "exercises.html#exercise-2",
    "title": "Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the surveys dataset:\n\nremove NA’s from the hindfoot_length\nremove rows missing sex\nfind the minimum, mean, and maximum hindfoot_length, and number of observations for each species\norder the results by the longest hindfoot_length\n\nFix the FIXMEs and then switch the top line of the code block to #| eval: true. After which execute the code block (PC: ctrl + shift + enter, or Mac: cmd + shift + return)\n\nlibrary(tidyverse)\nsurveys &lt;- read_csv(\"data/surveys_complete_77_89.csv\")\n\n\nFIXME %&gt;% \n  filter(FIXME) %&gt;% \n  group_by(FIXME) %&gt;% \n  summarise(FIXME) %&gt;% \n  FIXME(desc(FIXME))"
  }
]